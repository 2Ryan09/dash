dist: .dcg/dist/py

vars:
  js_name: ${package.name}
  py_name: ${package.name.replace(/(\s|-)/, '_')}
  version: ${package.version}

  class_declaration: ${js.core.readRecipeFile('class_declaration.template.py')}
  class_header: |
    # AUTO GENERATED FILE - DO NOT EDIT

    from dash.development.base_component import Component, _explicitize_args

artifacts:
  - filepath: ${target.target}
    foreach: config.dist
    template: ${js.core.readConfigFile(target.source)}

  - filepath: ${target.target}
    foreach: config.vars.dist
    template: ${js.core.readConfigFile(target.source)}

  - filepath: __init__.py
    template: ${js.core.readRecipeFile('templates/__init__.py')}

  - filepath: _imports_.py
    template: ${js.core.readRecipeFile('templates/_imports_.py')}

  - filepath: LICENSE
    condition: js.core.sourceFileExists('LICENSE') || js.core.sourceFileExists('LICENSE.txt')
    template: ${js.core.readSourceFile('LICENSE') || js.core.readSourceFile('LICENSE.txt')}

  - filepath: MANIFEST.in
    template: ${js.core.readRecipeFile('templates/MANIFEST.in')}

  - filepath: metadata.json
    template: ${js.stringify(metadata)}

  - filepath: ${target.displayName}.py
    foreach: metadata
    template: ${js.core.readRecipeFile('templates/<component>.py')}

templates:
  include:
    template: include ${target.target}
    join: |

  resource:
    template: ${js.getJsDist(target, recipe.vars.js_name, recipe.vars.py_name, recipe.vars.version)}
    join: ','
  class_declaration:
    # template: ${recipe.vars.class_declaration}
    template: ${js.core.readRecipeFile('templates/__class_declaration.py')}

  class_parameter:
    template: ${key}=Component.UNDEFINED
    join: ', '
  class_property:
    template: ${js.getPropDescription(key, target)}
    join: |

  class_property_name:
    template: \'${key}\'
    join: ', '

  import_export:
    template: \t\'${target.displayName}\'

  import_from:
    template: from .${target.displayName} import DataTable